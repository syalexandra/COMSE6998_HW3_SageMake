AWSTemplateFormatVersion: "2010-09-09"
Description: A sample template for photo album
Parameters:
  EndpointName:
    Description: Name of the endpoint
    Type: String

  LF1Name:
    Description: Lambda function name
    Type: String

  S3BucketName:
    Description: Name of the S3 email save
    Type: String

  RuleSetName:
    Description: Name of the rules for ses
    Type: String

  LF2Name:
    Description: Lambda 2 function name
    Type: String


Resources:
  LambdaFunction1:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python3.9
      FunctionName: !Ref LF1Name
      Code:
        S3Bucket: "hw3-lambda-code-bucket"
        S3Key: "spam-detection.zip"
      Description: "lambda function created by function"
      MemorySize: 128
      Environment: 
        Variables: 
          Region: "us-east-1"
          Endpoint:
            Ref: EndpointName
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LF1Role.Arn
      Layers:
        - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p39-numpy:2


  LambdaFunction2:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python3.9
      FunctionName: !Ref LF2Name
      Code:
        S3Bucket: "hw3-lambda-code-bucket"
        S3Key: "tigger-notebook.zip"
      Description: "lambda function created by function"
      MemorySize: 128
      Environment: 
        Variables: 
          Region: "us-east-1"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LF1Role.Arn


  ScheduledRule:
    Type: "AWS::Events::Rule"
    Properties: 
      ScheduleExpression: "rate(10 days)"
      State: "DISABLED"
      Targets: 
        - 
          Arn: !GetAtt LambdaFunction2.Arn
          Id: "TargetFunction"


  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref LambdaFunction2
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"

  LF1InvokePermission: 
    Type: "AWS::Lambda::Permission"
    DependsOn: LambdaFunction1
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt LambdaFunction1.Arn
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt S3Bucket.Arn

  LF1Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Role to provide LF1
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
      RoleName: SpamDetectionRole


  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref S3BucketName
      AccessControl: PublicRead
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:Put'
            Function: !GetAtt LambdaFunction1.Arn


  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: "2012-10-17"
        Statement:
        - Sid: Statement1
          Effect: Allow
          Principal: '*'
          Action: 's3:*'
          Resource: !Join
            - ''
            - - 'arn:aws:s3:::'
              - !Ref S3Bucket
              - /*
        - Sid: AllowSESPuts
          Effect: Allow
          Principal:
            Service: ses.amazonaws.com
          Action: s3:PutObject
          Resource : !Join
            - ''
            - - 'arn:aws:s3:::'
              - !Ref S3Bucket
              - /*
          Condition:
            StringEquals:
              'aws:Referer': !Ref AWS::AccountId
      Bucket: !Ref S3Bucket


  SESRuleSet:
    Type: 'AWS::SES::ReceiptRuleSet'
    Properties: 
      RuleSetName: !Ref RuleSetName


  SESRule:
    Type: 'AWS::SES::ReceiptRule'
    Properties:
      RuleSetName: !Ref RuleSetName
      Rule:
        Enabled: true
        ScanEnabled: false
        Actions:
          - S3Action:
              BucketName: !Ref S3BucketName
        Recipients: 
          - 'sunyue.co.uk'

